<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
    1、mybatis可以使用properties来引入外部properties配置文件的内容；
    resource：引入类路径下的资源
    url：引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="db.properties"></properties>

    <!--
    2、settting包含很多设置，其中有一个可以驼峰名命名自动映射数据库，即javaBean中字段aColumn 自动与数据库中的A_COLUMN 映射
    -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--对于写入数据库的值为null时，避免不同数据库对null的认可程度不一样-->
        <setting name="jdbcTypeForNull" value="NULL"/>
        
        <!--开启延时加载-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="true"/>

        <!--全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存-->
        <setting name="cacheEnabled" value="true"/>
        
        
    </settings>
    <!--
    3、typeAliases别名处理器，主要是针对javaBean进行起别名,别名不区分大小写===》一般还是写全类名方式，不用别名
    type:指定要起别名的类型全类名;默认别名就是类名小写；employee
				alias:指定新的别名
				package:为某个包下的所有类批量起别名
				name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写）
				批量起别名的情况下，如果出现冲突，则使用@Alias注解为某个冲突java bean类型指定新的别名
    -->
    <typeAliases>
        <typeAlias type="com.hy.mybatis.Employee"/>
        <package name="com.hy.mybatis"/>

    </typeAliases>

    <!--
    4、environments：环境们，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。
			environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识
				transactionManager：事务管理器；
					type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
						自定义事务管理器：实现TransactionFactory接口.type指定为全类名

				dataSource：数据源;
					type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)
								|POOLED(PooledDataSourceFactory)
								|JNDI(JndiDataSourceFactory)
					自定义数据源：实现DataSourceFactory接口，type是全类名
    -->
    <environments default="development">    <!--通过default=“dev-Oracle”将数据库切换到oracle，这里的环境就是切换数据库的-->
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
    5、databaseIdProvider：支持多数据库厂商的；
     type="DB_VENDOR"：VendorDatabaseIdProvider
     作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
     MySQL，Oracle，SQL Server,xxxx
     -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>


    <!--加载映射文件-->
    <!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->
    <!-- 6、mappers：将sql映射注册到全局配置中 -->
    <!--
        mapper:注册一个sql映射
            注册配置文件
            resource：引用类路径下的sql映射文件
                mybatis/mapper/EmployeeMapper.xml
            url：引用网路路径或者磁盘路径下的sql映射文件
                file:///var/mappers/AuthorMapper.xml

            注册接口
            class：引用（注册）接口，
                1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
                2、没有sql映射文件，所有的sql都是利用注解写在接口上;
                推荐：
                    比较重要的，复杂的Dao接口我们来写sql映射文件
                    不重要，简单的Dao接口为了开发快速可以使用注解；
    -->
    <mappers>
        <mapper resource="EmployeeMapper.xml"/>
        <mapper class="mapper.EmployeeMapperAnnotation"/>
        <mapper resource="EmployeeMapperPlus.xml"/>
        <mapper resource="DepartmentMapper.xml"/>
    </mappers>


    <!-- 批量注册：sqlxml配置文件必须和接口放在同一路径下，而且必须同名 -->
   <!-- <package name="mapper"/>-->


</configuration>